<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="description" content="Potree Viewer">
    <meta name="author" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Potree Viewer</title>

    <!-- Stylesheets -->
    <link rel="stylesheet" type="text/css" href="<%= libpath %>/build/potree/potree.css">
    <link rel="stylesheet" type="text/css" href="<%= libpath %>/libs/jquery-ui/jquery-ui.min.css">
    <link rel="stylesheet" type="text/css" href="<%= libpath %>/libs/openlayers3/ol.css">
    <link rel="stylesheet" type="text/css" href="<%= libpath %>/libs/spectrum/spectrum.css">
    <link rel="stylesheet" type="text/css" href="<%= libpath %>/libs/jstree/themes/mixed/style.css">

    <style>
        #measurement-controls {
            position: absolute;
            top: 20px;
            right: 20px;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 5px;
            z-index: 1000;
        }

        button {
            padding: 8px 15px;
            margin: 5px;
            cursor: pointer;
        }
    </style>
</head>

<body>
    <!-- JavaScript Libraries -->
    <script src="<%= libpath %>/libs/jquery/jquery-3.1.1.min.js"></script>
    <script src="<%= libpath %>/libs/spectrum/spectrum.js"></script>
    <script src="<%= libpath %>/libs/jquery-ui/jquery-ui.min.js"></script>
    <script src="<%= libpath %>/libs/other/BinaryHeap.js"></script>
    <script src="<%= libpath %>/libs/tween/tween.min.js"></script>
    <script src="<%= libpath %>/libs/d3/d3.js"></script>
    <script src="<%= libpath %>/libs/proj4/proj4.js"></script>
    <script src="<%= libpath %>/libs/openlayers3/ol.js"></script>
    <script src="<%= libpath %>/libs/i18next/i18next.js"></script>
    <script src="<%= libpath %>/libs/jstree/jstree.js"></script>
    <script src="<%= libpath %>/build/potree/potree.js"></script>
    <script src="<%= libpath %>/libs/plasio/js/laslaz.js"></script>

    <!-- Main Container -->
    <div class="potree_container" style="position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;">
        <div id="potree_render_area" style="background-image: url('');">
        </div>
        <div id="potree_sidebar_container">
        </div>
        <div id="measurement-controls">
            
        </div>
    </div>


    <!-- Main Application Script -->
    <script type="module">
        // Import Three.js module
        import * as THREE from "<%= libpath %>/libs/three.js/build/three.module.js";

        // Initialize viewer
        window.viewer = new Potree.Viewer(document.getElementById("potree_render_area"));

        // Point cloud directories
        const potreeDirs = <%- JSON.stringify(potreeDirs) %>;
        console.log("Point cloud directories:", potreeDirs);
        console.log("Point cloud directories received:", <% - JSON.stringify(potreeDirs) %>);

        // Create description with link to metadata
        const description = `Classification <strong><%- dataName %></strong>`;
        console.log(description);
        viewer.setDescription(description);

        // Configure viewer settings
        viewer.setEDLEnabled(true);
        viewer.setFOV(60);
        viewer.setPointBudget(2_000_000);

        // Load GUI and initialize filters
        viewer.loadGUI(() => {
            $("#menu_filters").next().show();
            viewer.toggleSidebar();
        });

        // Get interest scheme from server
        const interestScheme = <%- JSON.stringify(interest_scheme) %>;
        console.log("Classification scheme:", interestScheme);

        // Initialize a counter to track loaded point clouds
        let loadedClouds = 0;
        const totalClouds = potreeDirs.length;

        // Get all area polygons data from server
        const areaPolygons = <%- JSON.stringify(areasData) %>;
        console.log("Area polygons:", areaPolygons);

        let sceneSG = new Potree.Scene();
        viewer.setScene(sceneSG)

        function addAmount(){

        }

        function addCesium(){
            let cp = new Cesium.Cartesian3(areaPolygons, 552161.235598733, 4660771.704035539);

        }

        async function addAnnotations(objects){


            console.log('objects is',objects)
            for (const item of objects){
                // console.log('item',item)

                let elTitle = $(`
                    <span>
                        ${item.name} ${item.count}
                    </span>
                `);
                elTitle.find("img[name=action_set_scene]").click( (event) => {
                    event.stopPropagation();
                    viewer.setScene(sceneLion); 
                });
                elTitle.toString = () => "About Annotations";

                let aAbout1 = new Potree.Annotation({
                    position: [item.centroid.x, item.centroid.y, item.centroid.z],
                    title: elTitle,
                    cameraPosition: [item.centroid.x+5, item.centroid.y+5, item.centroid.z+5],
                    cameraTarget:   [item.centroid.x, item.centroid.y, item.centroid.z],
                });
                sceneSG.annotations.add(aAbout1);
            }
        }
        // Function to load all point clouds
        async function loadPointClouds() {
            // Apply the classification scheme once all point clouds are loaded
            viewer.setClassifications(interestScheme);

            // Load each point cloud
            for (const dir of potreeDirs) {
                const pointCloudUrl = `${dir}`;
                console.log(`Loading point cloud: ${pointCloudUrl}`);

                try {
                    const result = await Potree.loadPointCloud(pointCloudUrl);
                    let pointcloud = result.pointcloud;
                    let material = pointcloud.material;
                    console.log('result',result)
                    console.log('pointcloud',pointcloud.boundingBox.min.x)
                    console.log('pointcloud',pointcloud.boundingBox.min.y)
                    console.log('pointcloud',pointcloud.boundingBox.min.z)
                    console.log('pointcloud',pointcloud.boundingBox)
                    // Configure material properties
                    material.minSize = 2;
                    material.pointSizeType = Potree.PointSizeType.ADAPTIVE;
                    // material.pointColorType = Potree.PointColorType.CLASSIFICATION;

                    // Add point cloud to scene
                    // viewer.scene.addPointCloud(pointcloud);
                    
                    sceneSG.addPointCloud(pointcloud);



                    loadedClouds++;
                    console.log(`Loaded ${loadedClouds}/${totalClouds} point clouds`);

                    // Fit to screen after the last point cloud is loaded
                    if (loadedClouds === totalClouds) {
                        viewer.fitToScreen();

                        // Automatically show the areas after point clouds are loaded
                        // setTimeout(() => {
                        //     createAreaMeasurements();
                        // }, 1000);
                    }
                } catch (error) {
                    console.error(`Error loading point cloud ${pointCloudUrl}:`, error);
                }
            }

            await addAnnotations(areaPolygons.objects)
        }

        // Start loading point clouds
        loadPointClouds();

        function renderLabelsSummary() {
            const measurementControls = document.getElementById('measurement-controls');
            
            if (!measurementControls || !areaPolygons || !areaPolygons.labelsSummary) {
                console.error('Missing required elements or data');
                return;
            }
            
            // Create container for summary
            const summaryContainer = document.createElement('div');
            summaryContainer.className = 'labels-summary-container';
            summaryContainer.style.padding = '10px';
            summaryContainer.style.backgroundColor = '#f5f5f5';
            summaryContainer.style.borderRadius = '5px';
            summaryContainer.style.marginTop = '10px';
            
            // Create header
            const header = document.createElement('h3');
            header.textContent = 'Labels Summary';
            header.style.margin = '0 0 10px 0';
            header.style.fontSize = '16px';
            summaryContainer.appendChild(header);
            
            // Create table for labels
            const table = document.createElement('table');
            table.style.width = '100%';
            table.style.borderCollapse = 'collapse';
            table.style.fontSize = '14px';
            
            // Create table header
            const thead = document.createElement('thead');
            const headerRow = document.createElement('tr');
            
            ['Color', 'Label', 'Count', '%'].forEach(text => {
                const th = document.createElement('th');
                th.textContent = text;
                th.style.padding = '5px';
                th.style.textAlign = 'left';
                th.style.borderBottom = '1px solid #ddd';
                headerRow.appendChild(th);
            });
            
            thead.appendChild(headerRow);
            table.appendChild(thead);
            
            // Create table body
            const tbody = document.createElement('tbody');
            
            // Calculate total count for percentage
            const totalCount = areaPolygons.labelsSummary.reduce((sum, item) => sum + item.count, 0);
            
            // Add each label to the table
            areaPolygons.labelsSummary.forEach(label => {
                const row = document.createElement('tr');
                
                // Color cell
                const colorCell = document.createElement('td');
                colorCell.style.padding = '5px';
                const colorSwatch = document.createElement('div');
                colorSwatch.style.width = '15px';
                colorSwatch.style.height = '15px';
                colorSwatch.style.backgroundColor = `rgba(${label.color[0]*255}, ${label.color[1]*255}, ${label.color[2]*255}, ${label.color[3]})`;
                colorSwatch.style.borderRadius = '3px';
                colorCell.appendChild(colorSwatch);
                row.appendChild(colorCell);
                
                // Label name cell
                const nameCell = document.createElement('td');
                nameCell.textContent = label.name;
                nameCell.style.padding = '5px';
                row.appendChild(nameCell);
                
                // Count cell
                const countCell = document.createElement('td');
                countCell.textContent = label.count;
                countCell.style.padding = '5px';
                row.appendChild(countCell);
                
                // Percentage cell
                const percentCell = document.createElement('td');
                const percent = ((label.count / totalCount) * 100).toFixed(1);
                percentCell.textContent = `${percent}%`;
                percentCell.style.padding = '5px';
                row.appendChild(percentCell);
                
                tbody.appendChild(row);
            });
            
            table.appendChild(tbody);
            summaryContainer.appendChild(table);
            
            // Clear existing content and append the new summary
            measurementControls.innerHTML = '';
            measurementControls.appendChild(summaryContainer);
            }

            // Call this function when you want to update the summary
            // Example: After loading the polygon or when data changes
            // renderLabelsSummary();

            // If you want this to run automatically when data is available:
            const checkAndRender = () => {
            if (areaPolygons && areaPolygons.labelsSummary) {
                renderLabelsSummary();
            } else {
                setTimeout(checkAndRender, 500); // Check again in 500ms
            }
            };

            // Start checking
            checkAndRender();

    </script>
</body>

</html>