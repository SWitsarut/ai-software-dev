<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="description" content="Potree Viewer">
    <meta name="author" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Potree Viewer</title>

    <!-- Stylesheets -->
    <link rel="stylesheet" type="text/css" href="<%= libpath %>/build/potree/potree.css">
    <link rel="stylesheet" type="text/css" href="<%= libpath %>/libs/jquery-ui/jquery-ui.min.css">
    <link rel="stylesheet" type="text/css" href="<%= libpath %>/libs/openlayers3/ol.css">
    <link rel="stylesheet" type="text/css" href="<%= libpath %>/libs/spectrum/spectrum.css">
    <link rel="stylesheet" type="text/css" href="<%= libpath %>/libs/jstree/themes/mixed/style.css">
    
    <style>
        #measurement-controls {
            position: absolute;
            top: 20px;
            right: 20px;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 5px;
            z-index: 1000;
        }
        
        button {
            padding: 8px 15px;
            margin: 5px;
            cursor: pointer;
        }
    </style>
</head>

<body>
    <!-- JavaScript Libraries -->
    <script src="<%= libpath %>/libs/jquery/jquery-3.1.1.min.js"></script>
    <script src="<%= libpath %>/libs/spectrum/spectrum.js"></script>
    <script src="<%= libpath %>/libs/jquery-ui/jquery-ui.min.js"></script>
    <script src="<%= libpath %>/libs/other/BinaryHeap.js"></script>
    <script src="<%= libpath %>/libs/tween/tween.min.js"></script>
    <script src="<%= libpath %>/libs/d3/d3.js"></script>
    <script src="<%= libpath %>/libs/proj4/proj4.js"></script>
    <script src="<%= libpath %>/libs/openlayers3/ol.js"></script>
    <script src="<%= libpath %>/libs/i18next/i18next.js"></script>
    <script src="<%= libpath %>/libs/jstree/jstree.js"></script>
    <script src="<%= libpath %>/build/potree/potree.js"></script>
    <script src="<%= libpath %>/libs/plasio/js/laslaz.js"></script>

    <!-- Main Container -->
    <div class="potree_container" style="position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;">
        <div id="potree_render_area" style="background-image: url('');">
        </div>
        <div id="potree_sidebar_container">
        </div>
    </div>
    
    <!-- Measurement Control Buttons -->
    <div id="measurement-controls">
        <button id="show-areas-btn">Show All Areas</button>
        <button id="clear-areas-btn">Clear All Areas</button>
    </div>

    <!-- Main Application Script -->
    <script type="module">
        // Import Three.js module
        import * as THREE from "<%= libpath %>/libs/three.js/build/three.module.js";

        // Initialize viewer
        window.viewer = new Potree.Viewer(document.getElementById("potree_render_area"));

        // Point cloud directories
        const potreeDirs = <%- JSON.stringify(potreeDirs) %>;
        console.log("Point cloud directories:", potreeDirs);
        console.log("Point cloud directories received:", <%- JSON.stringify(potreeDirs) %>);

        // Create description with link to metadata
        const description = `Classification <strong><%- dataName %></strong>`;
        console.log(description);
        viewer.setDescription(description);

        // Configure viewer settings
        viewer.setEDLEnabled(true);
        viewer.setFOV(60);
        viewer.setPointBudget(2_000_000);

        // Load GUI and initialize filters
        viewer.loadGUI(() => {
            $("#menu_filters").next().show();
            viewer.toggleSidebar();
        });

        // Get interest scheme from server
        const interestScheme = <%- JSON.stringify(interest_scheme) %>;
        console.log("Classification scheme:", interestScheme);

        // Initialize a counter to track loaded point clouds
        let loadedClouds = 0;
        const totalClouds = potreeDirs.length;
        
        // Get all area polygons data from server
        const areaPolygons = <%- JSON.stringify(areasData) %>;
        console.log("Area polygons:", areaPolygons);
        
        // Array to store all area measurements
        let areaMeasurements = [];
        
        // Function to create area measurements for all polygons
        function createAreaMeasurements() {
            // Clear existing measurements
            clearAreaMeasurements();
            
            // Create a measurement for each polygon
            areaPolygons.forEach((area, index) => {
                if (area.cornors && area.cornors.length >= 3) {
                    // Create a new area measurement
                    const measure = new Potree.Measure();
                    measure.name = `Area ${index + 1}`;
                    measure.closed = true;
                    measure.showArea = true;
                    
                    // Add markers for each corner point
                    for (const point of area.cornors) {
                        measure.addMarker(new THREE.Vector3(point.x, point.y, point.z || 0));
                    }
                    
                    // Add the measurement to the scene
                    viewer.scene.addMeasurement(measure);
                    
                    // Store the measurement
                    areaMeasurements.push(measure);
                }
            });
        }
        
        // Function to clear all area measurements
        function clearAreaMeasurements() {
            areaMeasurements.forEach(measure => {
                viewer.scene.removeMeasurement(measure);
            });
            areaMeasurements = [];
        }
        
        // Setup button event handlers
        document.getElementById('show-areas-btn').addEventListener('click', () => {
            createAreaMeasurements();
        });
        
        document.getElementById('clear-areas-btn').addEventListener('click', () => {
            clearAreaMeasurements();
        });

        // Function to load all point clouds
        async function loadPointClouds() {
            // Apply the classification scheme once all point clouds are loaded
            viewer.setClassifications(interestScheme);
            
            // Load each point cloud
            for (const dir of potreeDirs) {
                const pointCloudUrl = `${dir}`;
                console.log(`Loading point cloud: ${pointCloudUrl}`);
                
                try {
                    const result = await Potree.loadPointCloud(pointCloudUrl);
                    let pointcloud = result.pointcloud;
                    let material = pointcloud.material;
                    
                    // Configure material properties
                    material.minSize = 2;
                    material.pointSizeType = Potree.PointSizeType.ADAPTIVE;
                    // material.pointColorType = Potree.PointColorType.CLASSIFICATION;
                    
                    // Add point cloud to scene
                    viewer.scene.addPointCloud(pointcloud);
                    
                    loadedClouds++;
                    console.log(`Loaded ${loadedClouds}/${totalClouds} point clouds`);
                    
                    // Fit to screen after the last point cloud is loaded
                    if (loadedClouds === totalClouds) {
                        viewer.fitToScreen();
                        
                        // Automatically show the areas after point clouds are loaded
                        setTimeout(() => {
                            createAreaMeasurements();
                        }, 1000);
                    }
                } catch (error) {
                    console.error(`Error loading point cloud ${pointCloudUrl}:`, error);
                }
            }
        }
        
        // Start loading point clouds
        loadPointClouds();
    </script>
</body>

</html>